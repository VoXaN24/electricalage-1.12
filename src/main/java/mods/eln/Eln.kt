package mods.eln

import com.teamwizardry.librarianlib.features.base.ModCreativeTab
import mods.eln.entity.ReplicatorPopProcess
import mods.eln.ghost.GhostManager
import mods.eln.i18n.I18N.tr
import mods.eln.init.Config
import mods.eln.init.Items
import mods.eln.init.ModBlock
import mods.eln.item.MiningPipeDescriptor
import mods.eln.item.electricalinterface.ItemEnergyInventoryProcess
import mods.eln.misc.FunctionTable
import mods.eln.misc.Obj3DFolder
import mods.eln.misc.WindProcess
import mods.eln.node.NodeBlockEntity
import mods.eln.node.NodeManager
import mods.eln.node.NodePublishProcess
import mods.eln.node.six.SixNodeItem
import mods.eln.node.transparent.TransparentNodeItem
import mods.eln.packets.*
import mods.eln.server.*
import mods.eln.sim.Simulator
import mods.eln.sim.ThermalLoadInitializer
import mods.eln.sixnode.lampsocket.LightBlockEntity
import mods.eln.sixnode.lampsupply.LampSupplyElement
import mods.eln.sixnode.modbusrtu.ModbusTcpServer
import mods.eln.sixnode.powersocket.PowerSocketElement
import mods.eln.sixnode.tutorialsign.TutorialSignElement
import mods.eln.sixnode.wirelesssignal.IWirelessSignalSpot
import mods.eln.sixnode.wirelesssignal.tx.WirelessSignalTxElement
import mods.eln.transparentnode.teleporter.TeleporterElement
import net.minecraft.command.ServerCommandManager
import net.minecraft.init.Blocks
import net.minecraft.item.ItemStack
import net.minecraftforge.fml.common.FMLCommonHandler
import net.minecraftforge.fml.common.Mod
import net.minecraftforge.fml.common.event.*
import net.minecraftforge.fml.common.network.FMLEventChannel
import net.minecraftforge.fml.common.network.NetworkRegistry
import net.minecraftforge.fml.common.network.simpleimpl.SimpleNetworkWrapper
import net.minecraftforge.fml.relauncher.Side
import org.apache.logging.log4j.Logger

@Mod(modid = Eln.MODID, version = Eln.VERSION, name = Eln.NAME, dependencies = Eln.DEPENDENCIES, acceptedMinecraftVersions = Eln.ACCEPTABLE_MINECRAFT_VERSION, acceptableSaveVersions = Eln.ACCEPTABLE_SAVE_VERSIONS)
class Eln {

    @Mod.EventHandler
    fun preInit(e: FMLPreInitializationEvent) {
        val metadata = e.modMetadata
        metadata.authorList = AUTHORS.toMutableList()
        metadata.description = tr("mod.meta.desc")
        metadata.url = URL
        metadata.autogenerated = false

        Tab // Force construction.
        ModBlock // Force construction.
        Items // Force construction.

        logger = e.modLog
        logger.info(tr("Bzzzt"))

        // Network:
        elnNetwork = NetworkRegistry.INSTANCE.newSimpleChannel(simpleChannelId);
        elnNetwork.registerMessage(TransparentNodeRequestPacketHandler::class.java, TransparentNodeRequestPacket::class.java, 1, Side.SERVER)
        elnNetwork.registerMessage(TransparentNodeResponsePacketHandler::class.java, TransparentNodeResponsePacket::class.java, 2, Side.CLIENT)
        elnNetwork.registerMessage(GhostNodeWailaRequestPacketHandler::class.java, GhostNodeWailaRequestPacket::class.java, 3, Side.SERVER)
        elnNetwork.registerMessage(GhostNodeWailaResponsePacketHandler::class.java, GhostNodeWailaResponsePacket::class.java, 4, Side.CLIENT)
        elnNetwork.registerMessage(SixNodeWailaRequestPacketHandler::class.java, SixNodeWailaRequestPacket::class.java, 5, Side.SERVER)
        elnNetwork.registerMessage(SixNodeWailaResponsePacketHandler::class.java, SixNodeWailaResponsePacket::class.java, 6, Side.CLIENT)
        eventChannel = NetworkRegistry.INSTANCE.newEventDrivenChannel(eventChannelID)
        packetHandler = PacketHandler()

        // Start the simulator.
        simulator = Simulator(
            0.05,
            1.0 / Config.electricalFrequency,
            Config.electricalInterSystemOverSampling,
            1.0 / Config.thermalFrequency)
        playerManager = PlayerManager()
        nodeManager = NodeManager("$MODID.nodes")
        ghostManager = GhostManager("$MODID.ghosts")
        delayedTaskManager = DelayedTaskManager()

        obj.loadAllElnModels()
    }

    @Mod.EventHandler
    fun postInit(event: FMLPostInitializationEvent) {
        serverEventListener = ServerEventListener()
    }

    /* This function is called both on startup and shutdown. */
    private fun clearSimulatorState() {
        TutorialSignElement.resetBalise()
        TeleporterElement.teleporterList.clear()
        LightBlockEntity.observers.clear()
        NodeBlockEntity.clientList.clear()
        WirelessSignalTxElement.channelMap.clear()
        IWirelessSignalSpot.spots.clear()
        LampSupplyElement.channelMap.clear()
        PowerSocketElement.channelMap.clear()
        playerManager.clear()
    }

    @Mod.EventHandler
    fun onServerStart(e: FMLServerAboutToStartEvent) {
        clearSimulatorState()

        simulator.reinit()

        modbusServer = ModbusTcpServer(Config.modbusPort)
        simulator.apply {
            addSlowProcess(windProcess)
            addSlowProcess(replicatorPopProcess)
            addSlowProcess(itemEnergyInventoryProcess)
            addSlowProcess(nodePublishProcess)
        }
    }

    @Mod.EventHandler
    fun onServerStarting(e: FMLServerStartingEvent) {
        val server = FMLCommonHandler.instance()
            .minecraftServerInstance
        val worldServer = server.getWorld(0)

/*
            ghostManagerNbt = worldServer.mapStorage!!.getOrLoadData(
                GhostManagerNbt::class.java, "GhostManager") as GhostManagerNbt
            if (ghostManagerNbt == null) {
                ghostManagerNbt = GhostManagerNbt("GhostManager")
                worldServer.mapStorage!!.setData("GhostManager", ghostManagerNbt)
            }

            nodeManagerNbt = worldServer.mapStorage!!.getOrLoadData(
                NodeManagerNbt::class.java, "NodeManager") as NodeManagerNbt?
            if (nodeManagerNbt == null) {
                nodeManagerNbt = NodeManagerNbt("NodeManager")
                worldServer.mapStorage!!.setData("NodeManager", nodeManagerNbt)
            }
*/

        val command = e.server.getCommandManager()
        val manager = command as ServerCommandManager
        manager.registerCommand(ConsoleListener())

        //regenOreScannerFactors()
    }


    @Mod.EventHandler
    fun onServerStopped(e: FMLServerStoppedEvent) {
        modbusServer.destroy()

        clearSimulatorState()

        nodeManager.clear()
        ghostManager.clear()
        //oreRegenerate.clear()
        delayedTaskManager.clear()
        DelayedBlockRemove.clear()
        serverEventListener.clear()

        simulator.stop()
    }


    companion object {
        const val MODID = "eln"
        const val VERSION = "2.0"
        const val ACCEPTABLE_SAVE_VERSIONS = "[2.0)"
        const val ACCEPTABLE_MINECRAFT_VERSION = "1.12.2"
        const val NAME = "Electrical Age"
        const val DEPENDENCIES = ""
        const val URL = "https://electrical-age.net"
        // TODO(1.12): Use Mod.updateJSON.
        const val UPDATE_URL = "https://github.com/Electrical-Age/ElectricalAge/releases"
        const val SRC_URL = "https://github.com/Electrical-Age"
        @JvmField
        val AUTHORS = arrayOf("Dolu1990", "lambdaShade", "cm0x4D", "metc", "Baughn")

        // Stateless helper processes:
        @JvmField
        val windProcess = WindProcess()
        @JvmField
        val replicatorPopProcess = ReplicatorPopProcess()
        @JvmField
        val itemEnergyInventoryProcess = ItemEnergyInventoryProcess()
        @JvmField
        val nodePublishProcess = NodePublishProcess()

        // Initialized in event handlers:
        lateinit var logger: Logger
        lateinit var simulator: Simulator
        lateinit var modbusServer: ModbusTcpServer
        lateinit var serverEventListener: ServerEventListener

        lateinit var playerManager: PlayerManager
        lateinit var nodeManager: NodeManager
        lateinit var ghostManager: GhostManager
        lateinit var delayedTaskManager: DelayedTaskManager

        //lateinit var ghostManagerNbt: GhostManagerNbt
        //lateinit var nodeManagerNbt: NodeManagerNbt

        // Packet code which we will hopefully be rid of:
        // TODO(1.12)
        lateinit var elnNetwork: SimpleNetworkWrapper
        const val simpleChannelId = "eln"
        lateinit var packetHandler: PacketHandler
        lateinit var eventChannel: FMLEventChannel
        const val eventChannelID = "eln-event"

        const val packetPlayerKey: Byte = 14
        const val packetNodeSingleSerialized: Byte = 15
        const val packetPublishForNode: Byte = 16
        const val packetOpenLocalGui: Byte = 17
        const val packetForClientNode: Byte = 18
        const val packetPlaySound: Byte = 19
        const val packetDestroyUuid: Byte = 20
        const val packetClientToServerConnection: Byte = 21
        const val packetServerToClientInfo: Byte = 22

        // Ditto, rendering:
        @JvmField
        val obj = Obj3DFolder()

        // Item code which should get moved:
        lateinit var sixNodeItem: SixNodeItem
        lateinit var transparentNodeItem: TransparentNodeItem
        lateinit var miningPipeDescriptor: MiningPipeDescriptor

        // Various physical constants:
        val batteryVoltageFunctionTable = FunctionTable(doubleArrayOf(0.000, 0.9, 1.0, 1.025, 1.04, 1.05, 2.0), 6.0 / 5.0)
        const val cableHeatingTime = 30.0
        const val cableWarmLimit = 130.0
        const val cableThermalConductionTao = 0.5
        val cableThermalLoadInitializer = ThermalLoadInitializer(
            cableWarmLimit, -100.0, cableHeatingTime, cableThermalConductionTao)
        val sixNodeThermalLoadInitializer = ThermalLoadInitializer(
            cableWarmLimit, -100.0, cableHeatingTime, 1000.0)

        object Tab : ModCreativeTab() {
            init {
                registerDefaultTab()
            }

            override val iconStack: ItemStack
                // TODO(1.12): No, lightning!
                get() = ItemStack(Blocks.LIT_PUMPKIN)
        }

    }
}
